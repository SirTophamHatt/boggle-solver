"use strict";
exports.__esModule = true;
var chai_1 = require("chai");
var test_helper_1 = require("./test-helper");
var trie_samples_1 = require("./trie-samples");
var node_1 = require("../node");
var trie_1 = require("../trie");
suite("Trie", function () {
    test("No initial words.", function () {
        var trie = new trie_1.Trie();
        chai_1.assert.equal(nodeCount(trie), 1);
        chai_1.assert.equal(trie.wordCount, 0);
    });
    suite("Samples", function () {
        test_helper_1.dataDrivenTest(trie_samples_1.testSamples, function (data, expect) {
            var trie = new trie_1.Trie(data);
            trie.optimize();
            if (expect.nodeCount !== undefined) {
                chai_1.assert.equal(nodeCount(trie), expect.nodeCount);
            }
            trie_samples_1.splitWords(data).forEach(function (word) {
                if (word === '') {
                    return;
                }
                chai_1.assert.ok(trie.isWord(word), word + ' should be in Trie');
            });
            if (expect.wordCount !== undefined) {
                chai_1.assert.equal(trie.wordCount, expect.wordCount);
            }
            else {
                chai_1.assert.equal(trie.wordCount, trie_samples_1.splitWords(data).length);
            }
            if (expect.nonWords) {
                expect.nonWords.forEach(function (word) {
                    chai_1.assert.ok(!trie.isWord(word), word + ' should not be in Trie');
                });
            }
        });
    });
    suite("Pack Samples", function () {
        var packTests = trie_samples_1.testSamples.filter(function (tests) {
            return tests.expect && tests.expect.pack;
        });
        test_helper_1.dataDrivenTest(packTests, function (data, expect) {
            var trie = new trie_1.Trie(data);
            trie.optimize();
            chai_1.assert.equal(trie.pack(), expect.pack);
        });
    });
    suite("English dictionary", function () {
        var words;
        var trie;
        this.timeout(100000);
        suiteSetup(function () {
            return trie_samples_1.readDictionary()
                .then(function (result) {
                words = result;
                trie = new trie_1.Trie(words);
                var packed = trie.pack();
            });
        });
        test("Read dictionary", function () {
            chai_1.assert.equal(trie.wordCount, 80612, "expected size");
            chai_1.assert.equal(words.length, 80612);
        });
        test("Sample words in Trie", function () {
            for (var i = 0; i < words.length; i += 20) {
                var word = words[i];
                chai_1.assert.ok(trie.isWord(word));
            }
            chai_1.assert.ok(!trie.isWord('xyzzy'));
        });
    });
});
function nodeCount(trie) {
    trie.prepDFS();
    return _nodeCount(trie, trie.root);
}
function _nodeCount(trie, node) {
    if (trie.visited(node)) {
        return 0;
    }
    var count = 0;
    for (var prop in node) {
        if (node_1.Node.isNode(node.child(prop))) {
            count += _nodeCount(trie, node.child(prop));
        }
    }
    return count + 1;
}
//# sourceMappingURL=trie-test.js.map