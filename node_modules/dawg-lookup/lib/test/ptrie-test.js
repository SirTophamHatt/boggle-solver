"use strict";
exports.__esModule = true;
var chai_1 = require("chai");
var test_helper_1 = require("./test-helper");
var trie_samples_1 = require("./trie-samples");
var trie_1 = require("../trie");
var ptrie_1 = require("../ptrie");
suite("PTrie", function () {
    suite("Samples", function () {
        test_helper_1.dataDrivenTest(trie_samples_1.testSamples, function (data, expect) {
            var trie = new trie_1.Trie(data);
            var packed = trie.pack();
            if (expect.nodeCount !== undefined) {
                chai_1.assert.equal(packed.split(';').length, expect.nodeCount, "node count");
            }
            var ptrie = new ptrie_1.PTrie(packed);
            trie_samples_1.splitWords(data).forEach(function (word) {
                if (word === '') {
                    return;
                }
                chai_1.assert.ok(ptrie.isWord(word), word + ' should be in PTrie.');
            });
            if (expect.nonWords) {
                expect.nonWords.forEach(function (word) {
                    chai_1.assert.ok(!ptrie.isWord(word), word + ' should not be in PTrie');
                });
            }
        });
    });
    suite("Symbols", function () {
        var tests = [
            ["0:4;a1q0;!b1;!c1;!d1;!e1;!f",
                ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef',
                    'q', 'qe', 'qef']]
        ];
        test_helper_1.dataDrivenTest(tests, function (data, expect) {
            var ptrie = new ptrie_1.PTrie(data);
            expect.forEach(function (word) {
                chai_1.assert.ok(ptrie.isWord(word), word + " is a word");
            });
        });
    });
    test("match", function () {
        var trie = new trie_1.Trie("cat cats dog dogs rat rats hi hit hither");
        var ptrie = new ptrie_1.PTrie(trie.pack());
        chai_1.assert.equal(ptrie.match("catjzkd"), 'cat');
        chai_1.assert.equal(ptrie.match("jzkdy"), '');
        chai_1.assert.equal(ptrie.match("jcatzkd"), '');
        chai_1.assert.equal(ptrie.match("hitherandyon"), 'hither');
    });
    test("completions", function () {
        var trie = new trie_1.Trie("cat cats dog dogs rat rats hi hit hither");
        var ptrie = new ptrie_1.PTrie(trie.pack());
        chai_1.assert.deepEqual(ptrie.completions(''), ['cat', 'cats', 'dog', 'dogs', 'hi',
            'hit', 'hither', 'rat', 'rats']);
        chai_1.assert.deepEqual(ptrie.completions('', 2), ['cat', 'cats']);
        chai_1.assert.deepEqual(ptrie.completions('c'), ['cat', 'cats']);
        chai_1.assert.deepEqual(ptrie.completions('cat'), ['cat', 'cats']);
        chai_1.assert.deepEqual(ptrie.completions('hi'), ['hi', 'hit', 'hither']);
    });
    test("English dictionary", function () {
        this.timeout(100000);
        return trie_samples_1.readDictionary()
            .then(function (words) {
            var trie = new trie_1.Trie(words);
            var ptrie = new ptrie_1.PTrie(trie.pack());
            // Test 5% of words
            for (var i = 0; i < words.length; i += 20) {
                chai_1.assert.ok(ptrie.isWord(words[i]));
            }
            chai_1.assert.ok(!ptrie.isWord('xyzzy'));
        });
    });
});
//# sourceMappingURL=ptrie-test.js.map